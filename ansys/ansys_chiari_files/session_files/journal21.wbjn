# encoding: utf-8
# 2024 R1
SetScriptVersion(Version="24.1.144")
system1 = GetSystem(Name="Geom")
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.SetFile(FilePath="H:/My Drive/chiari-computations/segmentation/s101/ansys geometry/ansys_geometry.scdoc")
geometryComponent1 = system1.GetComponent(Name="Geometry")
geometryComponent1.Reset()
geometry1.Edit(IsSpaceClaimGeometry=True)
Save(Overwrite=True)
Save(Overwrite=True)
Save(Overwrite=True)
geometry1.Exit()
system2 = GetSystem(Name="FLTG")
setup1 = system2.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1 = GetDataEntity("/Mesh 1/TGridData:TGridData")
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=16))
mesh1 = system2.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1 = system2.GetComponent(Name="Mesh")
meshComponent1.Refresh()
setup1.SendCommand(Command='/file/set-tui-version "24.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Pointer*rotate")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.242955 -0.30255 0.000928193) '(0 0 0) '(0.402619 -0.0376042 1.2364) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0639347 0.00647724 -0.310206) '(0 0 0) '(-0.49809 -0.247878 -0.0525411) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.613411 0.104771 0.31783) '(0 0 0) '(0.211157 -0.0331855 0.153658) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0334193 0.263767 -0.391569) '(0 0 0) '(0.623349 0.148859 -0.0286924) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0220382 0.0066996 0.0578373) '(0 0 0) '(-0.108436 -0.0657383 0.0632999) 0 0)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
setup1.SendCommand(Command="(%py-exec \"workflow.SaveWorkflow(FilePath=r'C:\\Users\\guill\\Documents\\chiari\\computations\\ansys\\s101\\s101_files\\dp0\\FLTG\\Fluent\\FLTG.4_workflow_files\\FLTG.4.wft')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.SaveWorkflow(FilePath=r'C:\\Users\\guill\\Documents\\chiari\\computations\\ansys\\s101\\s101_files\\dp0\\FLTG\\Fluent\\FLTG.4_workflow_files\\FLTG.4.wft')\")")
geometry1.Edit(IsSpaceClaimGeometry=True)
geometry1.Exit()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=16))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1.Refresh()
setup1.SendCommand(Command='/file/set-tui-version "24.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Pointer*rotate")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.132643 -0.28281 -0.0155249) '(0 0 0) '(0.470698 -0.274853 1.40128) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0481423 0.0363423 -0.205453) '(0 0 0) '(-0.207246 -1.15403 -0.250829) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0694741 0.0306488 0.267055) '(0 0 0) '(-0.59645 0.846063 -0.111303) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.156139 0.193803 -0.131391) '(0 0 0) '(0.50549 -0.0940149 0.405224) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.133043 -0.000960428 0.161532) '(0 0 0) '(-0.539966 -0.0281553 -0.446874) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.109091 -0.0931477 -0.111372) '(0 0 0) '(0.357633 -0.133727 0.35266) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0726436 0.19098 0.0446105) '(0 0 0) '(0.0701147 -0.335197 -0.0828469) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0272711 -0.0923148 0.0164307) '(0 0 0) '(-0.113672 -0.0187955 -0.0905721) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0132258 0.0855774 -0.059984) '(0 0 0) '(0.10409 0.282279 0.193219) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.0317805 -0.0284132 -0.0325609) '(0 0 0) '(0.102915 0.0404752 0.053914) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'cord', r'dura', r'tonsils'],r'BOIGrowthRate': 1.2,r'BOISize': 0.0001,r'BOIZoneorLabel': r'label',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Question*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Error*OK")')
setup1.SendCommand(Command="(%py-exec \"workflow.DeleteTasks(ListOfTasks=[r'facesize_1'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.DeleteTasks(ListOfTasks=[r'wall_sizing'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOIControlName': r'wall_sizing',r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'cord', r'dura', r'tonsils'],r'BOIGrowthRate': 1.1,r'BOISize': 5e-05,r'BOIZoneorLabel': r'label',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'GrowthRate': 1.1,r'MaxSize': 0.0001,r'MinSize': 5e-05,},r'ExecuteShareTopology': r'No',r'OriginalZones': [r'wall', r'bottom', r'top'],})\")")
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}))
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=16))
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command='/file/set-tui-version "24.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIGrowthRate': 1.2,r'BOISize': 0.0001,r'BOIZoneorLabel': r'label',})\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Error*OK")')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'AssignSizeUsing': r'Size',r'BOICellsPerGap': 1,r'BOIControlName': r'facesize_1',r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'cord', r'dura', r'tonsils'],r'BOIGrowthRate': 1.2,r'BOIMaxSize': 0.001277364976704121,r'BOIMinSize': 4.989706940250473e-06,r'BOIPatchingtoggle': False,r'BOIScopeTo': r'faces',r'BOISize': 0.0001,r'BOIZoneorLabel': r'label',r'DrawSizeControl': True,r'GrowthPattern': r'_ ___ _______ _______________',r'IgnoreOrientation': r'Yes',r'NumberofLayers': 3,r'SmallestHeight': 4.989706940250473e-05,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Question*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Error*OK")')
setup1.SendCommand(Command="(%py-exec \"workflow.DeleteTasks(ListOfTasks=[r'facesize_1'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOIControlName': r'wall_sizing',r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'cord', r'dura', r'tonsils'],r'BOIGrowthRate': 1.1,r'BOISize': 0.0001,r'BOIZoneorLabel': r'label',r'CompleteFaceLabelList': [r'wall'],r'DrawSizeControl': True,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'GrowthRate': 1.1,r'MaxSize': 0.001,r'MinSize': 0.0001,},r'ExecuteShareTopology': r'No',r'OriginalZones': [r'wall', r'bottom', r'top'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Pointer*rotate")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(-0.0879361 -0.204176 0.0712812) '(0 0 0) '(0.390614 0.186603 0.93511) 0 0)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-set-camera-relative '(-0.185547 -0.0829272 -0.14074) '(0 0 0) '(0.33897 -0.468588 0.440432) 0 0)(cx-use-window-id 51)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0221894 0.0664051 0.0382398) '(0 0 0) '(0.176993 0.136749 -0.15512) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'GrowthRate': 1.1,r'MaxSize': 0.002,r'MinSize': 0.0004,},r'ExecuteShareTopology': r'No',r'OriginalZones': [r'top', r'bottom', r'cord', r'tonsils', r'dura'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)(cx-set-camera-relative '(-0.113207 -0.0690839 0.0781368) '(0 0 0) '(0.518478 0.239967 0.179508) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.00138675 -0.102282 -0.0439225) '(0 0 0) '(-0.302157 -0.505465 1.17168) 0 0)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Revert()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)")
setup1.SendCommand(Command="(cx-use-window-id 51)")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-set-camera-relative '(-0.160144 -0.384046 0.0191894) '(0 0 0) '(0.489877 -0.125349 1.31331) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOIControlName': r'wall_sizing',r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'dura', r'geom-patch-body1'],r'BOIGrowthRate': 1.1,r'BOISize': 0.0005,r'BOIZoneorLabel': r'label',r'CompleteFaceLabelList': [r'cord', r'dura', r'tonsils'],r'DrawSizeControl': True,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOIControlName': r'wall_sizing',r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'cord', r'dura', r'tonsils'],r'BOIGrowthRate': 1.1,r'BOISize': 0.0005,r'BOIZoneorLabel': r'label',r'CompleteFaceLabelList': [r'dura', r'geom-patch-body1'],r'DrawSizeControl': True,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['wall_sizing'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Arguments.set_state({r'CFDSurfaceMeshControls': {r'GrowthRate': 1.1,r'MaxSize': 0.004,r'MinSize': 0.0005,},r'ExecuteShareTopology': r'No',r'OriginalZones': [r'top', r'bottom', r'cord', r'tonsils', r'dura'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)(cx-set-camera-relative '(-0.243567 0.179862 -0.149113) '(0 0 0) '(-0.0218704 -0.132558 0.079563) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.186067 0.284543 -0.151264) '(0 0 0) '(0.137056 0.0820587 -0.0521867) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-0.0660951 -0.127937 0.0780772) '(0 0 0) '(-0.163605 0.140777 -0.102466) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(0.13625 -0.0249047 0.201581) '(0 0 0) '(0.212377 0.139174 -0.174038) 0 0)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-set-camera-relative '(0.00413242 -0.0227674 -0.0137885) '(0 0 0) '(-0.125721 -0.133546 0.170675) 0 0)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton2(  Quality)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton1(  Check)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton2(  Quality)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuQuality*Evaluate Surface Quality")')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Arguments.set_state({r'BoundaryLabelList': [r'top', r'bottom'],r'BoundaryLabelTypeList': [r'velocity-inlet', r'velocity-inlet'],r'OldBoundaryLabelList': [r'top', r'bottom'],r'OldBoundaryLabelTypeList': [r'wall', r'wall'],r'OldLabelZoneList': [r'bottom', r'top'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Arguments.set_state(None)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].Arguments.set_state({r'LocalPrismPreferences': {r'Continuous': r'Continuous',},r'NumberOfLayers': 3,r'Rate': 1.1,})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Question*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command="(%py-exec \"workflow.DeleteTasks(ListOfTasks=[r'smooth-transition_2'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['smooth-transition_1'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton2(  Quality)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuQuality*Evaluate Volume Quality")(cx-gui-do cx-set-scale "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*Scale2" 85)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*Scale2")')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Improve Volume Mesh'].Execute()\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
setup1.SendCommand(Command="(%py-exec \"workflow.SaveWorkflow(FilePath=r'C:\\Users\\guill\\Documents\\chiari\\computations\\ansys\\s101\\s101_files\\dp0\\FLTG\\Fluent\\FLTG.5_workflow_files\\FLTG.5.wft')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.SaveWorkflow(FilePath=r'C:\\Users\\guill\\Documents\\chiari\\computations\\ansys\\s101\\s101_files\\dp0\\FLTG\\Fluent\\FLTG.5_workflow_files\\FLTG.5.wft')\")")
Save(Overwrite=True)
Save(Overwrite=True)
Save(Overwrite=True)
